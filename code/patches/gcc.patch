diff --git a/include/opcode/riscv-opc.h b/include/opcode/riscv-opc.h
index 0b8cc6c7dd..1f178b13f2 100644
--- a/include/opcode/riscv-opc.h
+++ b/include/opcode/riscv-opc.h
@@ -21,6 +21,12 @@
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
 /* Instruction opcode macros.  */
+/* RetTag: begin */
+#define MATCH_PAC 0x700b
+#define MASK_PAC  0xfe00707f
+#define MATCH_AUT 0x200700b
+#define MASK_AUT  0xfe00707f
+/* RetTag: end */
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
diff --git a/opcodes/riscv-opc.c b/opcodes/riscv-opc.c
index 2da0f7cf0a..a946d1f76b 100644
--- a/opcodes/riscv-opc.c
+++ b/opcodes/riscv-opc.c
@@ -269,6 +269,10 @@ match_vd_eq_vs1_eq_vs2 (const struct riscv_opcode *op,
 const struct riscv_opcode riscv_opcodes[] =
 {
 /* name, xlen, isa, operands, match, mask, match_func, pinfo.  */
+/* RetTag: begin */
+{"pac",         0, INSN_CLASS_I, "d,s,t",     MATCH_PAC, MASK_PAC, match_opcode, 0 },
+{"aut",         0, INSN_CLASS_I, "d,s,t",     MATCH_AUT, MASK_AUT, match_opcode, 0 },
+/* RetTag: end */
 {"unimp",       0, INSN_CLASS_C, "",          0, 0xffffU, match_opcode, INSN_ALIAS },
 {"unimp",       0, INSN_CLASS_I, "",          MATCH_CSRRW|(CSR_CYCLE << OP_SH_CSR), 0xffffffffU,  match_opcode, 0 }, /* csrw cycle, x0  */
 {"ebreak",      0, INSN_CLASS_C, "",          MATCH_C_EBREAK, MASK_C_EBREAK, match_opcode, INSN_ALIAS },
diff --git a/gcc/config/riscv/riscv.c b/gcc/config/riscv/riscv.c
index 17cdf705c32..1bc481927b7 100644
--- a/gcc/config/riscv/riscv.c
+++ b/gcc/config/riscv/riscv.c
@@ -122,6 +122,10 @@ struct GTY(())  riscv_frame_info {
 
   /* The offset of arg_pointer_rtx from the bottom of the frame.  */
   HOST_WIDE_INT arg_pointer_offset;
+
+  /* RetTag: begin */
+  bool laid_out;
+  /* RetTag: end */
 };
 
 enum riscv_privilege_levels {
@@ -3827,6 +3831,8 @@ riscv_compute_frame_info (void)
   /* Only use save/restore routines when the GPRs are atop the frame.  */
   if (frame->hard_frame_pointer_offset != frame->total_size)
     frame->save_libcall_adjustment = 0;
+
+  cfun->machine->frame.laid_out = true;
 }
 
 /* Make sure that we're not trying to eliminate to the wrong hard frame
@@ -4099,6 +4105,60 @@ riscv_expand_prologue (void)
   if (cfun->machine->naked_p)
     return;
 
+  /* RetTag: begin */
+  unsigned long function_id;
+  unsigned long shfit_nums = 32;
+  
+  /* Sign return address for functions.  */
+  // printf("riscv64_return_address_signing_enabled!\n");
+  /* Generate function id. */
+  srand((unsigned)time(NULL));
+  function_id = rand();
+  cfun->func_id = function_id;
+
+  int t1 = function_id & 0xff;
+  int t2 = (function_id >> 16) & 0xff;
+
+  insn = emit_insn (gen_addi (gen_rtx_REG (Pmode, T5_REGNUM), 
+  gen_rtx_REG (Pmode, T5_REGNUM), 
+  GEN_INT(t1)
+  ));
+
+  insn = emit_insn (gen_addi (gen_rtx_REG (Pmode, T6_REGNUM), 
+  gen_rtx_REG (Pmode, T6_REGNUM), 
+  GEN_INT(t2)
+  ));
+
+  insn = emit_insn (gen_slli (gen_rtx_REG (Pmode, T6_REGNUM),
+  gen_rtx_REG (Pmode, T6_REGNUM),
+  GEN_INT(16)
+  ));
+
+  insn = emit_insn (gen_add3_insn (
+    gen_rtx_REG (Pmode, T5_REGNUM),
+    gen_rtx_REG (Pmode, T5_REGNUM),
+    gen_rtx_REG (Pmode, T6_REGNUM) 
+  ));
+
+  insn = emit_insn (gen_slli (gen_rtx_REG (Pmode, STACK_POINTER_REGNUM),
+  gen_rtx_REG (Pmode, STACK_POINTER_REGNUM),
+  GEN_INT(shfit_nums)
+  ));
+
+  insn = emit_insn (gen_add3_insn (
+    gen_rtx_REG (Pmode, T5_REGNUM),
+    gen_rtx_REG (Pmode, T5_REGNUM),
+    gen_rtx_REG (Pmode, STACK_POINTER_REGNUM) 
+  ));
+
+  insn = emit_insn (gen_pac (gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM),
+  gen_rtx_REG (Pmode, T5_REGNUM),
+  gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM) 
+  ));
+  add_reg_note (insn, REG_CFA_TOGGLE_RA_MANGLE, const0_rtx);
+  RTX_FRAME_RELATED_P (insn) = 1;
+  /* RetTag: end */
+
   /* When optimizing for size, call a subroutine to save the registers.  */
   if (riscv_use_save_libcall (frame))
     {
@@ -4341,6 +4401,54 @@ riscv_expand_epilogue (int style)
       return;
     }
 
+  /* RetTag: begin */
+  /* Authenticate return address for functions. */
+  unsigned long shfit_nums = 32;
+  unsigned long function_id = cfun->func_id;
+
+  int t1 = function_id & 0xff;
+  int t2 = (function_id >> 16) & 0xff;
+
+  insn = emit_insn (gen_addi (gen_rtx_REG (Pmode, T5_REGNUM), 
+  gen_rtx_REG (Pmode, T5_REGNUM), 
+  GEN_INT(t1)
+  ));
+
+  insn = emit_insn (gen_addi (gen_rtx_REG (Pmode, T6_REGNUM), 
+  gen_rtx_REG (Pmode, T6_REGNUM), 
+  GEN_INT(t2)
+  ));
+
+  insn = emit_insn (gen_slli (gen_rtx_REG (Pmode, T6_REGNUM),
+  gen_rtx_REG (Pmode, T6_REGNUM),
+  GEN_INT(16)
+  ));
+
+  insn = emit_insn (gen_add3_insn (
+    gen_rtx_REG (Pmode, T5_REGNUM),
+    gen_rtx_REG (Pmode, T5_REGNUM),
+    gen_rtx_REG (Pmode, T6_REGNUM) 
+  ));
+
+  insn = emit_insn (gen_slli (gen_rtx_REG (Pmode, STACK_POINTER_REGNUM),
+  gen_rtx_REG (Pmode, STACK_POINTER_REGNUM),
+  GEN_INT(shfit_nums)
+  ));
+
+  insn = emit_insn (gen_add3_insn (
+    gen_rtx_REG (Pmode, T5_REGNUM),
+    gen_rtx_REG (Pmode, T5_REGNUM),
+    gen_rtx_REG (Pmode, STACK_POINTER_REGNUM) 
+  ));
+
+  insn = emit_insn (gen_aut (gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM),
+  gen_rtx_REG (Pmode, T5_REGNUM),
+  gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM) 
+  ));
+  add_reg_note (insn, REG_CFA_TOGGLE_RA_MANGLE, const0_rtx);
+  RTX_FRAME_RELATED_P (insn) = 1;
+  /* RetTag: end */
+
   /* Add in the __builtin_eh_return stack adjustment. */
   if ((style == EXCEPTION_RETURN) && crtl->calls_eh_return)
     emit_insn (gen_add3_insn (stack_pointer_rtx, stack_pointer_rtx,
diff --git a/gcc/config/riscv/riscv.md b/gcc/config/riscv/riscv.md
index c3687d57047..2f37865c3b8 100644
--- a/gcc/config/riscv/riscv.md
+++ b/gcc/config/riscv/riscv.md
@@ -23,6 +23,14 @@
   ;; Override return address for exception handling.
   UNSPEC_EH_RETURN
 
+  ;; RetTag: begin ;;
+  ;; Signing/Authenticating X1(ra).
+  UNSPEC_AUT
+  UNSPEC_PAC
+  UNSPEC_SLLI
+  UNSPEC_ADDI
+  ;; RetTag: end ;;
+
   ;; Symbolic accesses.  The order of this list must match that of
   ;; enum riscv_symbol_type in riscv-protos.h.
   UNSPEC_ADDRESS_FIRST
@@ -89,6 +97,10 @@
    (S9_REGNUM			25)
    (S10_REGNUM			26)
    (S11_REGNUM			27)
+   ;; RetTag: begin ;;
+   (T5_REGNUM			30)
+   (T6_REGNUM			31)
+   ;; RetTag: end ;;
 
    (NORMAL_RETURN		0)
    (SIBCALL_RETURN		1)
@@ -432,6 +444,47 @@
   (eq_attr "type" "ghost")
   "nothing")
 
+;; RetTag: begin ;;
+;; Signing X1(ra)
+(define_insn "pac"
+	[(set (match_operand:DI 0 "register_operand" "=r")
+	(unspec:DI [(match_operand:DI 1 "register_operand" "r")
+	(match_operand:DI 2 "register_operand" "r")]UNSPEC_PAC)
+  )
+  (clobber (reg:DI RETURN_ADDR_REGNUM))]
+	"TARGET_64BIT"
+	"pac\t%0,%1,%2"
+)
+
+;; Authenticating X1(ra)
+(define_insn "aut"
+	[(set (match_operand:DI 0 "register_operand" "=r")
+	(unspec:DI [(match_operand:DI 1 "register_operand" "r")
+	(match_operand:DI 2 "register_operand" "r")]UNSPEC_AUT))
+  (clobber (reg:DI RETURN_ADDR_REGNUM))]
+	"TARGET_64BIT"
+	"aut\t%0,%1,%2"
+)
+
+(define_insn "addi"
+  [(set (match_operand:DI 0 "register_operand" "=r,r")
+	(unspec:DI [(match_operand:DI 1 "register_operand" " r,r")
+		 (match_operand:DI 2 "arith_operand" " r,I")]UNSPEC_ADDI)
+  )]
+	"TARGET_64BIT"
+	"addi\t%0,%1,%2"
+)
+
+(define_insn "slli"
+  [(set (match_operand:DI 0 "register_operand" "=r,r")
+	(unspec:DI [(match_operand:DI 1 "register_operand" " r,r")
+		 (match_operand:DI 2 "arith_operand" " r,I")]UNSPEC_SLLI)
+  )]
+	"TARGET_64BIT"
+	"slli\t%0,%1,%2"
+)
+;; RetTag: end ;;
+
 ;;
 ;;  ....................
 ;;
diff --git a/gcc/function.h b/gcc/function.h
index 66cfa973808..e321442996b 100644
--- a/gcc/function.h
+++ b/gcc/function.h
@@ -246,6 +246,11 @@ public:
    describing the status of the current function.  */
 
 struct GTY(()) function {
+
+  /* RetTag: begin */
+  unsigned long func_id;
+  /* RetTag: end */
+
   struct eh_status *eh;
 
   /* The control flow graph for this function.  */